{"name":"Wiki","tagline":"","body":"### Postgres equality is case sensitive by default\r\n\r\nSo if you make this query, `SELECT * FROM a_table WHERE a_column LIKE '%some text%';`, you get 1 result back. \r\n\r\nHowever, if you change your pattern into upper case, `SELECT * FROM a_table WHERE a_column LIKE '%SOME TEXT%';`, you get 0 result back. \r\n\r\n##### Solutions...\r\n\r\n1. Use `CITEXT` datatype.\r\n\r\n    Example: In a migration script, do `change_column :a_table, :a_column, :citext`\r\n\r\n1. If a migration is not desirable, use the `ILIKE` keyword instead. \r\n\r\n    Back to the `a_table` example, if you do the following query, you get 1 result back. \r\n\r\n    `SELECT * FROM a_table WHERE a_column ILIKE '%SOME TEXT%';`\r\n\r\n##### But...\r\n\r\nNeither solutions work well with B-tree indexes. If you need to do a case insensitive query against a large table, you are screwed. \r\n\r\n1. When you are using a `CITEXT` datatype, value comparison does not utilize index because it is doing the following internally:\r\n\r\n    `SELECT * FROM tab WHERE lower(col) = LOWER(?);`\r\n\r\n    (reference from http://www.postgresql.org/docs/9.3/static/citext.html)\r\n\r\n2. When you are using the `ILIKE` keyword, postgres utilizes the index `only if the pattern starts with non-alphabetic characters`. So it is pretty useless. \r\n\r\n    (reference from http://www.postgresql.org/docs/9.2/static/indexes-types.html)\r\n\r\n##### So to unscrew it...\r\n\r\nYou will need to use a functional index. Below is the example of utilizing a lower case functional index against our search_events partition tables.\r\n\r\n1. Create a lower case functional index.\r\n\r\n    `CREATE INDEX a_table_lower_a_column_idx ON a_table (lower(query) varchar_pattern_ops);`\r\n\r\n2. Remember to lower everything in your scope.\r\n\r\n    `where('lower(a_column) = ?', 'SOME TEXT'.downcase)`\r\n\r\n3. Hope that you remember to down case everything 6 months later. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}